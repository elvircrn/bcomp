using namespace std;
#include <wchar.h>
typedef  wchar_t Name[500];
#include <string>
#include <iostream>
COMPILER B
#include "methods.inc"
std::wstring ParseList;
int scopepos;

CHARACTERS
  letter  = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  nzdigit  = "123456789" .
  odigit  = "01234567" .
  tab  = '\t' .
  eol  = '\r' .
  chars    = ' ' .. '~' - "'" - "*" .
  strings  = ' ' .. '~' - '"'- "*".
  escapeable = ' ' .. '~' .
  macros  = ANY - eol .


TOKENS
  identifier = ( "_" | "." | letter) { "_" | "."  | letter | digit } .
  gotolabel = ( "_" | "." | letter) { "_" | "."  | letter | digit } CONTEXT (":").
  number = nzdigit { digit }.
  onumber    = "0" { odigit }.
  string = '"' { ('*'  escapeable | strings) } '"' .
  char  = "'" ( '*'  escapeable | chars) "'" .

COMMENTS FROM "/*" TO "*/"
IGNORE '\t' + '\r' + '\n'


PRODUCTIONS

  B =                            (.  ParseList=L"(B ";scopepos=0;.)
    { Definition }                              
EOF                              (. ParseList+=L")";std::wcout << ParseList; .)
                                                
.
Ident <Name name>
  = identifier                  (. wcscpy(name, t->val) ; .)
  .

  GotoLabel  <Name name>
  =
    gotolabel                    (.  wcscpy(name, t->val) ; .)
    ':'
  .

  ConstVal                      (. Name name; .)
  =                              (.  .)
    number                      (. wcscpy(name, t->val) ; ParseList.append(L"(INT "); .)
                                (. ParseList.append(name);ParseList.append(L")") ;.)
  | string                      (. wcscpy(name, t->val) ;ParseList.append(L"(STRING `"); .)
                                (. ParseList.append(name);ParseList.append(L"`)") ;.)
  | char                        (. wcscpy(name, t->val) ;ParseList.append(L"(CHAR `"); .)
                                (. ParseList.append(name);ParseList.append(L"`)") ;.)
  | onumber                      (. wcscpy(name, t->val) ;ParseList.append(L"(ONUMBER "); .)
                                (. ParseList.append(name);ParseList.append(L")") ;.)
.
  Definition                    (. Name name; bool isarray; int position;.)
  =                              (. isarray=false;.)
  SYNC                          (. position=ParseList.length(); .) 
  Ident<name>                       (. if (IsDeclaredGlobal(name))  AlreadyErr(name) ; .)
                                (. ParseList.append(name);ParseList.append(L" ");.)
                                              
    ( FunctionDefinition        (. ParseList.insert(position,L"(FUNCDEF " ); ParseList.append(L") " ); .)
  |ArraySize<isarray>            (. ParseList.insert(position,isarray?L"(GARRDEF ":L"(GVARDEF ") ; ParseList.append(L") " ); .)
  ) .

  Initializator                  (. Name name;  .)
    =
    (ConstVal
    |Ident<name>                (. if (!IsDeclaredGlobal(name)) UndecErr(name); ParseList.append(L"(SAMEAS "); .)
                                (. ParseList.append(name);ParseList.append(L")") ;.)
    ).                            

  ArraySize<bool & isarray>      (. int position; .) 
    =                            (. isarray=false; .)
    ['[' [
  number                        (. isarray=true; ParseList.append(L"(ASIZE "); .)
                                (. ParseList.append(t->val);ParseList.append(L")") ;.)
  ] ']']
[                                (. position=ParseList.length(); .) 
    Initializator                (. ParseList.insert(position,L"(INIT " ); ParseList.append(L") " ); .)
    {
    ','                          (. position=ParseList.length();isarray=true; .) 
Initializator                    (. ParseList.insert(position,L"(INIT " ); ParseList.append(L") " ); .)
} ]
    ';'
  .
  FunctionDefinition
    =                            (. scopepos=ParseList.length(); .) 
    FunctionHeader
    FunctionBody
.

  FunctionHeader
  =
  '('                            (. ParseList.append(L"(FHEADER "); .)
  [
  FormalParamList
  ]                              (. ParseList.append(L") " ); .)
  ')' .

  FunctionBody                  (. .)
  = Statement .

  FormalParamList
  = FormalParameter
    { ',' FormalParameter
} .

  FormalParameter                (. Name name;  .)
    =
  Ident<name>                   (. if (IsDeclaredLocal(name)) AlreadyErr(name); .)
                                (. ParseList.append(L"(FPARAM "); .)
                                (. ParseList.append(name);ParseList.append(L" ");;ParseList.append(L")") ;.)

  .
  Statement                      (. bool hasdeclarations; int position; .)
    = SYNC                      (. position=ParseList.length();hasdeclarations=false; .) 
{ Label                          (. hasdeclarations=true; .)
| ExtrnDeclaration              (. hasdeclarations=true; .)
| AutoDeclaration                (. hasdeclarations=true; .)
}
(  StatementExpression
  | BreakStatement
  | CompoundStatement
  | ContinueStatement
  | GotoStatement
  | IfStatement
  | NullStatement
  | ReturnStatement
  | SwitchStatement
  | WhileStatement
  )                              (. if (hasdeclarations) { .)
                                  (.  ParseList.insert(position,L"(DECLSTAT " ); ParseList.append(L") " );} .)
  .

  Label                          (. Name name;int position; .)
=                                (. position=ParseList.length(); .) 
  "case" ConstVal
  ':'                            (.  ParseList.insert(position,L"(CASE " ); ParseList.append(L" ) " ); .)
  |  "default" ':'                (.  ParseList.append(L"(DEFAULT) "); .)
  | GotoLabel <name>              (.  ParseList.append(L"(LABEL ");ParseList.append(name); ;ParseList.append(L" )");.)
  .

  StatementExpression    
    =
    Expression          
    WEAK ';' .

  BreakStatement
  = "break"                      (. ParseList.append(L"(BREAK) "); .)
    WEAK ';'
.

  CompoundStatement      
  = "{"                          (. ParseList.append(L"(BLOCK "); .)
  {
    Statement            
} "}"                            (. ParseList.append(L") "); .)
  .

ContinueStatement        
  =
  "continue"                      (. ParseList.append(L"(CONTINUE) "); .)
  WEAK  ';' 
  .

  GotoStatement                  (. Name name;  .)
    =
    "goto"
Ident<name>                      (.  ParseList.append(L"(GOTO ");ParseList.append(name); ;ParseList.append(L")");.)
';'                            
    .

  IfStatement                    (. int position; bool haselse;.) 
  =                              (. haselse=false; .)
"if"                              (. position=ParseList.length(); .) 
  '(' Expression
    ')'
    Statement                  
[ "else" Statement                (. haselse=true; .)
    ]                            (. ParseList.insert(position,haselse? L"(IFELSE ": L"(IF ");ParseList.append(L")" );  .)
.

  NullStatement    = ';'
  .

  ReturnStatement                (. int position; bool paramExists; .)
    =                            (. paramExists = false; .)
"return"                
  [ WEAK  '('      
    Expression                    (. paramExists = true; .)
  WEAK  ')' ]                          
                                  (. ParseList.insert(position, paramExists? L"(RETURNPARAM " : L"(RETURN "); ParseList.append(L")"); .)
';' .

  SwitchStatement                (. int position; .)
=                                (. position=ParseList.length(); .)
  "switch"
  '(' Expression
  ')'
  CompoundStatement              (.  ParseList.insert(position, L"(SWITCH "); ParseList.append(L")"); .)
  .


  WhileStatement                  (. int position; .)
  =                              (. position=ParseList.length(); .)
  "while" '('
          Expression
  ')'
    Statement                    (. ParseList.insert(position, L"(WHILE "); ParseList.append(L")"); .)
  .

  ExtrnDeclaration                (. Name name;  .)
  =
  "extrn"                                  
    Ident<name>                  
                                  (.  ParseList.append(L"(EXTRN ");ParseList.append(name); ;ParseList.append(L" )");.)
                                  
{ ','
Ident<name>                      
                                  (.  ParseList.append(L"(EXTRN ");ParseList.append(name); ;ParseList.append(L" )");.)
                                      
} ';'  .


  AutoDeclaration                  (. Name name; int position; bool isarray;.)
  = 
    "auto"                        (. isarray=false;position=ParseList.length(); .)
Ident<name>                      
                                  (. ParseList.append(name);ParseList.append(L" "); .)                                        
[ ('[' number                      (. isarray=true; ParseList.append(L"(ASIZE "); .)
                                  (. ParseList.append(t->val);ParseList.append(L")") ;.)
']'
| number                          (. ParseList.append(L"(INIT "); .)
                                  (. ParseList.append(t->val);ParseList.append(L")") ;.)
  
) ]                                (. ParseList.insert(position,isarray?L"(LARRDEF ":L"(LVARDEF ") ; ParseList.append(L") " ); .)
{ ','                              (. isarray=false;position=ParseList.length(); .)
Ident <name>                      
                                  (. ParseList.append(name);ParseList.append(L" ");  .)
                                          
[ ('[' number                      (. isarray=true; ParseList.append(L"(ASIZE"); .)
                                  (. ParseList.append(t->val);ParseList.append(L")") ;.)
']' | number                      (. ParseList.append(L"(INIT"); .)
                                  (. ParseList.append(t->val);ParseList.append(L")") ;.)
  
) ]                                (. ParseList.insert(position,isarray?L"(LARRDEF ":L"(LVARDEF ") ; ParseList.append(L") " ); .)

} ';'  .
  Expression 
  = AssignExpr
  .

  AssignExpr                      (. int position; .)
  =                                (. position=ParseList.length(); .)
CondExpr      
    [(
    "="                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                                  (. ParseList.insert(position,L"(MOV " ); .)
                                  (. ParseList.append(L") " );.)
  | "=*"                      
AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                                  (. ParseList.insert(position,L"(MULTMOV " ); .)
                                  (. ParseList.append(L") " );.)
  | "=/"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(DIVMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=%"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(MODMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=+"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(ADDMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=-"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(SUBMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=&"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(ANDMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=^"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(XORMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=|"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(ORMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=<<"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(LSHIFTMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=>>"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(RSHIFTMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=<"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(ISLESSMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=<="                                      
    AssignExpr
                (. ParseList.insert(position,L"(ISLESSEQUMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=>"                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(ISGREATERMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=>="                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(ISGREATEREQUMOV " ); .)
                (. ParseList.append(L") " );.)
  | "==="                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(ISEQUMOV " ); .)
                (. ParseList.append(L") " );.)
  | "=!="                                      
    AssignExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(ISNEQUMOV " ); .)
                (. ParseList.append(L") " );.)
    )].

  CondExpr      (. int position; .)
  =            (. position=ParseList.length(); .)
  OrExpr        
['?'                            
  Expression
                              
                              
  ':'                                                                  
  CondExpr                                
                (. ParseList.insert(position,L"(CONDEXPR " ); .)
                (. ParseList.append(L") " );.)
  ].

  OrExpr        (. int position; .)          
  =            (. position=ParseList.length(); .)
  XorExpr
  {'|'                                        
XorExpr
                (. ParseList.insert(position,L"(OR " ); .)
                (. ParseList.append(L") " );.)
  }.

  XorExpr      (. int position; .)      
=              (. position=ParseList.length(); .) 
  AndExpr      
  {'^'                                    
    AndExpr          
                (. ParseList.insert(position,L"(XOR " ); .)
                (. ParseList.append(L") " );.)
  }.

  AndExpr      (. int position; .)        
=              (. position=ParseList.length(); .)
  EqlExpr      
  {'&'                                        
    EqlExpr                                
                (. ParseList.insert(position,L"(AND " ); .)
                (. ParseList.append(L") " );.)
  }.

  EqlExpr      (. int position; .)        
=              (. position=ParseList.length(); .)
  RelExpr
{
        ("=="                                      
        RelExpr
                (. ParseList.insert(position,L"(EQU " ); .)
                (. ParseList.append(L") " );.)
        |"!="                                      
        RelExpr
                (. ParseList.insert(position,L"(NEQU " ); .)
                (. ParseList.append(L") " );.)
        ) 
  }.

  RelExpr      (. int position; .)        
=              (. position=ParseList.length(); .) 
ShiftExpr
    {
('<'                                          
  ShiftExpr
                (. ParseList.insert(position,L"(LESSTHAN " ); .)
                (. ParseList.append(L") " );.)
|'>'                                          
  ShiftExpr
                (. ParseList.insert(position,L"(GREATERTHAN " ); .)
                (. ParseList.append(L") " );.)
|"<="                                        
  ShiftExpr
                (. ParseList.insert(position,L"(LESSEQUTHAN " ); .)
                (. ParseList.append(L") " );.)
|">="                                        
  ShiftExpr
                (. ParseList.insert(position,L"(GREATEREQUTHAN " ); .)
                (. ParseList.append(L") " );.)
  )
    }.

  ShiftExpr    (. int position; .)          
=              (. position=ParseList.length(); .) 
AddExpr                        
{
  ( "<<"                                      
AddExpr
                (. ParseList.insert(position,L"(LSHIFT " ); .)
                (. ParseList.append(L") " );.)
  | ">>"                                      
AddExpr
                (. ParseList.insert(position,L"(RSHIFT " ); .)
                (. ParseList.append(L") " );.)
  ) 
}.

  AddExpr      (. int position; .)          
  =            (. position=ParseList.length(); .)
  MultExpr
{
  ('+'                                          
MultExpr              
                (. ParseList.insert(position,L"(ADD " ); .)
                (. ParseList.append(L") " );.)
  |'-'                                        
MultExpr                                  
                (. ParseList.insert(position,L"(SUB " ); .)
                (. ParseList.append(L") " );.)
  )
    }.

  MultExpr      (. int position; .)        
    =          (. position=ParseList.length(); .)
UnaryExpr                
    {
( '*'                                        
    UnaryExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(MUL " ); .)
                (. ParseList.append(L") " );.)
| '/'                                        
  UnaryExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(DIV " ); .)
                (. ParseList.append(L") " );.)
| '%'                                        
    UnaryExpr         (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(MOD " ); .)
                (. ParseList.append(L") " );.)
  )
    }.

UnaryExpr      (. int position; .)        
    =          (. position=ParseList.length(); .)
    ( PostfixExpr      
    | '&'      (. ParseList.insert(position,L"(ADDROF "); .)
      UnaryExpr (. ParseList.append(L")"); .)
    | '*'      (. ParseList.insert(position,L"(PTR "); .)
    UnaryExpr  (. ParseList.append(L")"); .)
    | '+'      (. ParseList.insert(position,L"(UPLUS "); .)
    UnaryExpr  (. ParseList.append(L")"); .)
    | '-'      (. ParseList.insert(position,L"(UMINUS "); .)
    UnaryExpr  (. ParseList.append(L")"); .)
    | '~'      (. ParseList.insert(position,L"(UNEG "); .)
    UnaryExpr  (. ParseList.append(L")"); .)
    | '!'      (. ParseList.insert(position,L"(UNOT "); .)
    UnaryExpr  (. ParseList.append(L")"); .)
    | "++"      (. ParseList.insert(position,L"(PREINC "); .)
    UnaryExpr  (. ParseList.append(L")"); .)
    | "--"      (. ParseList.insert(position,L"(PREDEC "); .)
    UnaryExpr  (. ParseList.append(L")"); .)
    ).

  PostfixExpr  (. int position; .)      
    =          (. position=ParseList.length(); .)
    Primary                        
    { '['                                      
            Expression
        ']' 
                (. ParseList.insert(position,L"(INDEX " ); .)
                (. ParseList.append(L") " );.)
                      
    | '('                                      
        [ArgExprList]
        ')'
                (. ParseList.insert(position,L"(FUNCCALL " ); .)
                (. ParseList.append(L") " );.)
    | "++"      (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(POSTINC " ); .)
                (. ParseList.append(L") " );.)
    | "--"      (. if (!(Assignable(position))) { SemErr(L"Not assignable"); }.)
                (. ParseList.insert(position,L"(POSTDEC " ); .)
                (. ParseList.append(L") " );.)
    }.

  Primary      (.  Name name; int position;  .) 
    =                                            
    Ident<name>                
                (. ParseList.append(L"(VAR " );ParseList.append(name );ParseList.append(L")" );.)

    | ConstVal 
    |'(' Expression
')'  .

  ArgExprList  (. int position; .)
  =            (. position=ParseList.length(); .)
  AssignExpr    (. ParseList.insert(position,L"(ARG " ); .)
                (. ParseList.append(L") " );.)

  {','          (. position=ParseList.length(); .)
  AssignExpr    (. ParseList.insert(position,L"(ARG " ); .)
                (. ParseList.append(L") " );.)

  }.

END B.

